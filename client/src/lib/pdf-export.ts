import jsPDF from "jspdf";
import type { Tab, PlaylistWithItems } from "@shared/schema";

// PDF generation utilities for tabs and playlists
export function generateTabPDF(tab: Tab): void {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;
  const maxLineWidth = pageWidth - (margin * 2);
  let yPosition = margin;

  // Helper function to add text with word wrapping
  const addWrappedText = (text: string, fontSize: number, isBold: boolean = false) => {
    pdf.setFontSize(fontSize);
    if (isBold) {
      pdf.setFont(undefined, 'bold');
    } else {
      pdf.setFont(undefined, 'normal');
    }
    
    const lines = pdf.splitTextToSize(text, maxLineWidth);
    lines.forEach((line: string) => {
      if (yPosition > pageHeight - margin) {
        pdf.addPage();
        yPosition = margin;
      }
      pdf.text(line, margin, yPosition);
      yPosition += fontSize * 0.5;
    });
    yPosition += 5; // Add space after text block
  };

  // Helper function to add monospace text for tablature
  const addTabText = (text: string) => {
    pdf.setFont('courier', 'normal');
    pdf.setFontSize(10);
    
    const lines = text.split('\n');
    lines.forEach((line: string) => {
      if (yPosition > pageHeight - margin) {
        pdf.addPage();
        yPosition = margin;
      }
      pdf.text(line, margin, yPosition);
      yPosition += 12;
    });
    yPosition += 10; // Add space after tab block
  };

  // Header with Tabster branding
  pdf.setFillColor(255, 107, 53); // Tabster orange
  pdf.rect(0, 0, pageWidth, 15, 'F');
  
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(14);
  pdf.setFont(undefined, 'bold');
  pdf.text('Tabster', margin, 10);
  
  pdf.setTextColor(0, 0, 0);
  yPosition = 25;

  // Tab title and artist
  addWrappedText(tab.title, 20, true);
  addWrappedText(`by ${tab.artist}`, 14);
  
  // Add separator line
  pdf.setLineWidth(0.5);
  pdf.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += 10;

  // Tab metadata
  const metadata = [
    `Difficulty: ${tab.difficulty}`,
    `Genre: ${tab.genre}`,
    `Tuning: ${tab.tuning}`,
  ];
  
  if (tab.capo) {
    metadata.push(`Capo: ${tab.capo}`);
  }

  addWrappedText(metadata.join(' • '), 12);

  // Add another separator
  pdf.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += 15;

  // Tab content
  addWrappedText('Tablature:', 14, true);
  addTabText(tab.content);

  // Footer
  const footerY = pageHeight - 15;
  pdf.setFontSize(8);
  pdf.setTextColor(128, 128, 128);
  pdf.text('Generated by Tabster - Your Ultimate Guitar Tab Library', margin, footerY);
  pdf.text(`Created: ${new Date().toLocaleDateString()}`, pageWidth - margin - 50, footerY);

  // Save the PDF
  const fileName = `${tab.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_${tab.artist.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`;
  pdf.save(fileName);
}

export function generatePlaylistPDF(playlist: PlaylistWithItems): void {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;
  const maxLineWidth = pageWidth - (margin * 2);
  let yPosition = margin;

  // Helper function to add text with word wrapping
  const addWrappedText = (text: string, fontSize: number, isBold: boolean = false) => {
    pdf.setFontSize(fontSize);
    if (isBold) {
      pdf.setFont(undefined, 'bold');
    } else {
      pdf.setFont(undefined, 'normal');
    }
    
    const lines = pdf.splitTextToSize(text, maxLineWidth);
    lines.forEach((line: string) => {
      if (yPosition > pageHeight - margin) {
        pdf.addPage();
        yPosition = margin;
        
        // Add header to new pages
        pdf.setFillColor(255, 107, 53);
        pdf.rect(0, 0, pageWidth, 15, 'F');
        pdf.setTextColor(255, 255, 255);
        pdf.setFontSize(12);
        pdf.setFont(undefined, 'bold');
        pdf.text(`${playlist.title} (continued)`, margin, 10);
        pdf.setTextColor(0, 0, 0);
        yPosition = 25;
      }
      pdf.text(line, margin, yPosition);
      yPosition += fontSize * 0.5;
    });
    yPosition += 5;
  };

  // Helper function to add monospace text for tablature
  const addTabText = (text: string) => {
    pdf.setFont('courier', 'normal');
    pdf.setFontSize(9);
    
    const lines = text.split('\n');
    lines.forEach((line: string) => {
      if (yPosition > pageHeight - margin) {
        pdf.addPage();
        yPosition = margin;
        
        // Add header to new pages
        pdf.setFillColor(255, 107, 53);
        pdf.rect(0, 0, pageWidth, 15, 'F');
        pdf.setTextColor(255, 255, 255);
        pdf.setFontSize(12);
        pdf.setFont(undefined, 'bold');
        pdf.text(`${playlist.title} (continued)`, margin, 10);
        pdf.setTextColor(0, 0, 0);
        yPosition = 25;
      }
      pdf.text(line, margin, yPosition);
      yPosition += 10;
    });
    yPosition += 10;
  };

  // Header with Tabster branding
  pdf.setFillColor(255, 107, 53); // Tabster orange
  pdf.rect(0, 0, pageWidth, 15, 'F');
  
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(14);
  pdf.setFont(undefined, 'bold');
  pdf.text('Tabster', margin, 10);
  
  pdf.setTextColor(0, 0, 0);
  yPosition = 25;

  // Playlist title and description
  addWrappedText(playlist.title, 20, true);
  if (playlist.description) {
    addWrappedText(playlist.description, 12);
  }
  
  // Add separator line
  pdf.setLineWidth(0.5);
  pdf.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += 10;

  // Playlist metadata
  const createdBy = playlist.user.firstName && playlist.user.lastName 
    ? `${playlist.user.firstName} ${playlist.user.lastName}`
    : playlist.user.email || 'Unknown';
    
  const metadata = [
    `${playlist.items.length} tabs`,
    `Created by: ${createdBy}`,
    `Updated: ${new Date(playlist.updatedAt || playlist.createdAt || new Date()).toLocaleDateString()}`,
  ];

  addWrappedText(metadata.join(' • '), 12);

  // Add another separator
  pdf.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += 15;

  // Sort playlist items by order
  const sortedItems = playlist.items.sort((a, b) => a.order - b.order);

  // Generate each tab in the playlist
  sortedItems.forEach((item, index) => {
    const tab = item.tab;
    
    // Tab header
    addWrappedText(`${index + 1}. ${tab.title} by ${tab.artist}`, 16, true);
    
    // Tab metadata
    const tabMetadata = [
      `Difficulty: ${tab.difficulty}`,
      `Genre: ${tab.genre}`,
      `Tuning: ${tab.tuning}`,
    ];
    
    if (tab.capo) {
      tabMetadata.push(`Capo: ${tab.capo}`);
    }

    addWrappedText(tabMetadata.join(' • '), 10);
    
    // Tab content
    addTabText(tab.content);
    
    // Add space between tabs
    if (index < sortedItems.length - 1) {
      yPosition += 10;
      pdf.setLineWidth(0.2);
      pdf.line(margin, yPosition, pageWidth - margin, yPosition);
      yPosition += 15;
    }
  });

  // Footer on last page
  const footerY = pageHeight - 15;
  pdf.setFontSize(8);
  pdf.setTextColor(128, 128, 128);
  pdf.text('Generated by Tabster - Your Ultimate Guitar Tab Library', margin, footerY);
  pdf.text(`Generated: ${new Date().toLocaleDateString()}`, pageWidth - margin - 50, footerY);

  // Save the PDF
  const fileName = `${playlist.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_playlist.pdf`;
  pdf.save(fileName);
}
